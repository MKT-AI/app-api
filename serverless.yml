# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: allancho
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: mkt-ai
# "service" is the name of this project. This will also be added to your AWS resource names.
service: app-api

package:
  exclude:
    - layers/**

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  profile: nit
  region: ap-northeast-2
  memorySize: 128
  timeout: 15
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:GetObjectVersion"
        - "s3:PutObject"
        - "s3:CreateBucket"
      Resource:
        - "arn:aws:s3:::mktcontentsbucket/*"
  httpApi:
    cors:
      allowedOrigins:
        - "*"
      allowedHeaders:
        - Content-Type
        - Authorization
        - x-mktai-session-token
      allowedMethods:
        - GET
        - POST
        - PATCH
        - DELETE
        - OPTIONS
  environment:
  layers:
    - { Ref: NpmLambdaLayer }

custom:
  functionsBasePath: functions

layers:
  npm:
    path: layers/npm
    name: ${self:service}-${sls:stage}-npm

functions:
  user_login:
    handler: user.login
    events:
      - httpApi:
          path: /login
          method: post

  session_validate:
    handler: user.validate
    events:
      - httpApi:
          path: /session/validate
          method: get

  user_new:
    handler: user.new
    events:
      - httpApi:
          path: /user
          method: post

  user_list:
    handler: user.list
    events:
      - httpApi:
          path: /user
          method: get

  user_search:
    handler: user.search
    events:
      - httpApi:
          path: /user/search
          method: get

  user_detail:
    handler: user.detail
    events:
      - httpApi:
          path: /user/{userId}
          method: get

  user_update:
    handler: user.update
    events:
      - httpApi:
          path: /user/{userId}
          method: patch

  user_delete:
    handler: user.delete
    events:
      - httpApi:
          path: /user/{userId}
          method: delete

  user_auth:
    handler: user.auth
    events:
      - httpApi:
          path: /auth
          method: get

  project_new:
    handler: project.new
    events:
      - httpApi:
          path: /project
          method: post

  project_list:
    handler: project.list
    events:
      - httpApi:
          path: /project
          method: get

  project_detail:
    handler: project.detail
    events:
      - httpApi:
          path: /project/{projectId}
          method: get

  project_update:
    handler: project.update
    events:
      - httpApi:
          path: /project/{projectId}
          method: patch

  project_delete:
    handler: project.delete
    events:
      - httpApi:
          path: /project/{projectId}
          method: delete

  item_new:
    handler: item.new
    events:
      - httpApi:
          path: /item
          method: post

  item_list:
    handler: item.list
    events:
      - httpApi:
          path: /item
          method: get

  item_detail:
    handler: item.detail
    events:
      - httpApi:
          path: /item/{itemId}
          method: get

  item_update:
    handler: item.update
    events:
      - httpApi:
          path: /item/{itemId}
          method: patch

  item_delete:
    handler: item.delete
    events:
      - httpApi:
          path: /item/{itemId}
          method: delete

  usage_new:
    handler: usage.new
    events:
      - httpApi:
          path: /usage
          method: post

  usage_track:
    handler: usage.track
    events:
      - httpApi:
          path: /usage/track
          method: post

  usage_list:
    handler: usage.list
    events:
      - httpApi:
          path: /usage
          method: get

  bucket_get:
    handler: bucket.createGetUrl
    events:
      - httpApi:
          path: /bucket/download/{file_key}
          method: get

  bucket_post:
    handler: bucket.createPostUrl
    events:
      - httpApi:
          path: /bucket/upload/{file_extension}
          method: get

  bucket_presigned:
    handler: bucket.getPresignedUrl
    events:
      - httpApi:
          path: /bucket/presigned/{file_extension}
          method: get

plugins:
  - serverless-dotenv-plugin
  - serverless-functions-base-path
  - serverless-ignore
